#include "AssessedProblem.h"
#include <cmath>
#include <iostream>
#include <vector>

// Print out the current charges and dipole moments
void printSystem(std::vector<pointCharge> charges, std::vector<dipole> dipoles){
    std::cout << "\nPoint charges";
    std::cout << "\nPosition z / Angstrom    Charge q / e";
    for(int i=0; i<charges.size(); i++){
        std::cout << "\n" << charges[i].getPosition() << "    " << charges[i].getCharge();
    }
    std::cout << "\n\nDipoles";
    std::cout << "\nPosition z / Angstrom    Dipole moment mu / D";
    for(int i=0; i<dipoles.size(); i++){
        std::cout << "\n" << dipoles[i].getPosition() << "    " << dipoles[i].getMoment();
    }
    std::cout << "\n";
}

// Displacement vector from position1 to position2 (in one dimension, this is just the difference)
double displacement(double position1, double position2){
    double disp = position2 - position1;
    return disp;
}

// Dot product between two vectors (in one dimension, this is just the product)
double dotproduct(double vector1, double vector2){
    double prod = vector1 * vector2;
    return prod;
}

// Magnitude of a vector
double magnitude(double vector){
    return sqrt(dotproduct(vector, vector));
}

// Electrostatic potential at a given position generated by a given point charge
double pointChargePotential(double position, pointCharge pointCharge_){
    double dist = magnitude(displacement(pointCharge_.getPosition(), position));
    return pointCharge_.getCharge() / dist;
}

// Electrostatic potential at a given position generated by a given dipole
double dipolePotential(double position, dipole dipole_){
    double disp = displacement(dipole_.getPosition(), position);
    double dist = magnitude(disp);
    return dotproduct(dipole_.getMoment(), disp) / pow(dist, 3);
}

// Electric field at a given position generated by a given point charge
double pointChargeField(double position, pointCharge pointCharge_){
    double disp = displacement(pointCharge_.getPosition(), position);
    double dist = magnitude(disp);
    return pointCharge_.getCharge() * disp / pow(dist, 2);
}

// Electric field at a given position generated by a given dipole
double dipoleField(double position, dipole dipole_){
    double disp = displacement(dipole_.getPosition(), position);
    double dist = magnitude(disp);
    return 2 * dipole_.getMoment() / pow(dist, 3);
}

std::vector<dipole> newDipoles(std::vector<pointCharge> charges, std::vector<dipole> dipoles){
    std::vector<dipole> oldDipoles = dipoles;
    double oldMoment, newMoment, polarisability, position, field;
    for (int i=0; i<dipoles.size(); i++){
        oldMoment = oldDipoles[i].getMoment();
        polarisability = oldDipoles[i].getPolarisability();
        position = oldDipoles[i].getPosition();
        field = oldDipoles[i].getField();
        for (int j=0; j<charges.size(); j++){
            
            if (position != charges[j].getPosition()){
                field += pointChargeField(position, charges[j]);
            }
        }
        for (int j=0; j<dipoles.size(); j++){
            if (position != dipoles[j].getPosition()){
                std::cout << i << "    " << j << "\n";
                field += dipoleField(position, oldDipoles[j]);
            }
        }
        std::cout << field << "\n";
        dipoles[i].setField(field);
        dipoles[i].setMoment(oldMoment + polarisability * field);
    }
    return dipoles;
}

int main(int argc, char *argv[]){
    // Default parameters for 1d lattice of identical charges and 1d lattice of identical dipoles
    double potential = 0.;
    double field = 0.;
    int nCharges = 0;
    int nDipoles = 0;
    double chargeLatticeSeparation = 0.;
    double dipoleLatticeSeparation = 0.;
    double charge = 0.;
    double polarisability = 0.;
    double moment = 0.;

    // Read command line arguments to update parameters
    for (int i=1; i<argc; i+=2 ){
        std::string flag = std::string(argv[i]);
        std::string value = std::string(argv[i+1]);
        if (flag == "-nc"){
            nCharges = stoi(value);
        } else if (flag == "-nd"){
            nDipoles = stoi(value);
        } else if (flag == "-cl"){
            chargeLatticeSeparation = stod(value);
        } else if (flag == "-dl"){
            dipoleLatticeSeparation = stod(value);
        } else if (flag == "-c"){
            charge = stod(value);
        } else if (flag == "-p"){
            polarisability = stod(value);
        } else if (flag == "-m"){
            moment = stod(value);
        } else if (flag == "-f"){
            field = stod(value);
        }
    }

    // Place charges
    std::vector<pointCharge> charges(nCharges);
    for(int i=0; i<nCharges; i++){
        charges[i].setPosition(i*chargeLatticeSeparation);
        charges[i].setPotential(potential);
        charges[i].setField(field);
        charges[i].setCharge(charge);
    }

    // Place dipoles
    std::vector<dipole> dipoles(nDipoles);
    for(int i=0; i<nDipoles; i++){
        dipoles[i].setPosition((i+1)*dipoleLatticeSeparation);
        dipoles[i].setPotential(potential);
        dipoles[i].setField(field);
        dipoles[i].setPolarisability(polarisability);
        dipoles[i].setMoment(moment);
    }

    printSystem(charges, dipoles);
    dipoles = newDipoles(charges, dipoles);
    printSystem(charges, dipoles);
    return 0;
}